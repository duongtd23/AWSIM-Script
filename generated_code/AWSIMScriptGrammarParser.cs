//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/AWSIMScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AWSIMScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		STRING=10, SIGN=11, NUMBER=12, ID=13, WS=14;
	public const int
		RULE_scenario = 0, RULE_statement = 1, RULE_assignmentStm = 2, RULE_expression = 3, 
		RULE_function = 4, RULE_argumentList = 5, RULE_vehicleTypeExp = 6, RULE_positionExp = 7, 
		RULE_lanePositionExp = 8, RULE_laneExp = 9, RULE_offsetExp = 10, RULE_routesExp = 11, 
		RULE_routeExp = 12, RULE_speedExp = 13, RULE_variableExp = 14;
	public static readonly string[] ruleNames = {
		"scenario", "statement", "assignmentStm", "expression", "function", "argumentList", 
		"vehicleTypeExp", "positionExp", "lanePositionExp", "laneExp", "offsetExp", 
		"routesExp", "routeExp", "speedExp", "variableExp"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", "','", "'at'", "'['", "']'", "'with-speed-limit'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "STRING", 
		"SIGN", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AWSIMScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AWSIMScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AWSIMScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AWSIMScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AWSIMScriptGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioContext scenario() {
		ScenarioContext _localctx = new ScenarioContext(Context, State);
		EnterRule(_localctx, 0, RULE_scenario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30;
				statement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmContext assignmentStm() {
			return GetRuleContext<AssignmentStmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37;
				assignmentStm();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				function();
				State = 39;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmContext assignmentStm() {
		AssignmentStmContext _localctx = new AssignmentStmContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignmentStm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			variableExp();
			State = 44;
			Match(T__1);
			State = 45;
			expression();
			State = 46;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VehicleTypeExpContext vehicleTypeExp() {
			return GetRuleContext<VehicleTypeExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionExpContext positionExp() {
			return GetRuleContext<PositionExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutesExpContext routesExp() {
			return GetRuleContext<RoutesExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				vehicleTypeExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				positionExp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				routesExp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51;
				variableExp();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 52;
				function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AWSIMScriptGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(ID);
			State = 56;
			Match(T__2);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9344L) != 0)) {
				{
				State = 57;
				argumentList();
				}
			}

			State = 60;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 10, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			expression();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 63;
				Match(T__4);
				State = 64;
				expression();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VehicleTypeExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AWSIMScriptGrammarParser.STRING, 0); }
		public VehicleTypeExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vehicleTypeExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterVehicleTypeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitVehicleTypeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVehicleTypeExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VehicleTypeExpContext vehicleTypeExp() {
		VehicleTypeExpContext _localctx = new VehicleTypeExpContext(Context, State);
		EnterRule(_localctx, 12, RULE_vehicleTypeExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LanePositionExpContext lanePositionExp() {
			return GetRuleContext<LanePositionExpContext>(0);
		}
		public PositionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionExpContext positionExp() {
		PositionExpContext _localctx = new PositionExpContext(Context, State);
		EnterRule(_localctx, 14, RULE_positionExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			lanePositionExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LanePositionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LaneExpContext laneExp() {
			return GetRuleContext<LaneExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OffsetExpContext offsetExp() {
			return GetRuleContext<OffsetExpContext>(0);
		}
		public LanePositionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lanePositionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterLanePositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitLanePositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLanePositionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LanePositionExpContext lanePositionExp() {
		LanePositionExpContext _localctx = new LanePositionExpContext(Context, State);
		EnterRule(_localctx, 16, RULE_lanePositionExp);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				laneExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				laneExp();
				State = 76;
				Match(T__5);
				State = 77;
				offsetExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LaneExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AWSIMScriptGrammarParser.STRING, 0); }
		public LaneExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_laneExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterLaneExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitLaneExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLaneExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LaneExpContext laneExp() {
		LaneExpContext _localctx = new LaneExpContext(Context, State);
		EnterRule(_localctx, 18, RULE_laneExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AWSIMScriptGrammarParser.NUMBER, 0); }
		public OffsetExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offsetExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterOffsetExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitOffsetExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffsetExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetExpContext offsetExp() {
		OffsetExpContext _localctx = new OffsetExpContext(Context, State);
		EnterRule(_localctx, 20, RULE_offsetExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutesExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RouteExpContext[] routeExp() {
			return GetRuleContexts<RouteExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteExpContext routeExp(int i) {
			return GetRuleContext<RouteExpContext>(i);
		}
		public RoutesExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routesExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterRoutesExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitRoutesExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutesExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutesExpContext routesExp() {
		RoutesExpContext _localctx = new RoutesExpContext(Context, State);
		EnterRule(_localctx, 22, RULE_routesExp);
		int _la;
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				Match(T__6);
				State = 86;
				routeExp();
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 87;
					Match(T__4);
					State = 88;
					routeExp();
					}
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 94;
				Match(T__7);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(T__6);
				State = 97;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LaneExpContext laneExp() {
			return GetRuleContext<LaneExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpeedExpContext speedExp() {
			return GetRuleContext<SpeedExpContext>(0);
		}
		public RouteExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterRouteExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitRouteExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteExpContext routeExp() {
		RouteExpContext _localctx = new RouteExpContext(Context, State);
		EnterRule(_localctx, 24, RULE_routeExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			laneExp();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 101;
				Match(T__8);
				State = 102;
				speedExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AWSIMScriptGrammarParser.NUMBER, 0); }
		public SpeedExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speedExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterSpeedExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitSpeedExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedExpContext speedExp() {
		SpeedExpContext _localctx = new SpeedExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_speedExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AWSIMScriptGrammarParser.ID, 0); }
		public VariableExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpContext variableExp() {
		VariableExpContext _localctx = new VariableExpContext(Context, State);
		EnterRule(_localctx, 28, RULE_variableExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,110,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,4,0,32,8,0,11,0,12,0,33,1,0,1,0,1,1,1,1,1,1,1,1,3,1,42,8,1,1,2,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,54,8,3,1,4,1,4,1,4,3,4,59,8,4,1,4,
		1,4,1,5,1,5,1,5,5,5,66,8,5,10,5,12,5,69,9,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
		8,1,8,1,8,3,8,80,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,5,11,90,8,11,
		10,11,12,11,93,9,11,1,11,1,11,1,11,1,11,3,11,99,8,11,1,12,1,12,1,12,3,
		12,104,8,12,1,13,1,13,1,14,1,14,1,14,0,0,15,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,0,0,106,0,31,1,0,0,0,2,41,1,0,0,0,4,43,1,0,0,0,6,53,1,0,0,
		0,8,55,1,0,0,0,10,62,1,0,0,0,12,70,1,0,0,0,14,72,1,0,0,0,16,79,1,0,0,0,
		18,81,1,0,0,0,20,83,1,0,0,0,22,98,1,0,0,0,24,100,1,0,0,0,26,105,1,0,0,
		0,28,107,1,0,0,0,30,32,3,2,1,0,31,30,1,0,0,0,32,33,1,0,0,0,33,31,1,0,0,
		0,33,34,1,0,0,0,34,35,1,0,0,0,35,36,5,0,0,1,36,1,1,0,0,0,37,42,3,4,2,0,
		38,39,3,8,4,0,39,40,5,1,0,0,40,42,1,0,0,0,41,37,1,0,0,0,41,38,1,0,0,0,
		42,3,1,0,0,0,43,44,3,28,14,0,44,45,5,2,0,0,45,46,3,6,3,0,46,47,5,1,0,0,
		47,5,1,0,0,0,48,54,3,12,6,0,49,54,3,14,7,0,50,54,3,22,11,0,51,54,3,28,
		14,0,52,54,3,8,4,0,53,48,1,0,0,0,53,49,1,0,0,0,53,50,1,0,0,0,53,51,1,0,
		0,0,53,52,1,0,0,0,54,7,1,0,0,0,55,56,5,13,0,0,56,58,5,3,0,0,57,59,3,10,
		5,0,58,57,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,61,5,4,0,0,61,9,1,0,0,
		0,62,67,3,6,3,0,63,64,5,5,0,0,64,66,3,6,3,0,65,63,1,0,0,0,66,69,1,0,0,
		0,67,65,1,0,0,0,67,68,1,0,0,0,68,11,1,0,0,0,69,67,1,0,0,0,70,71,5,10,0,
		0,71,13,1,0,0,0,72,73,3,16,8,0,73,15,1,0,0,0,74,80,3,18,9,0,75,76,3,18,
		9,0,76,77,5,6,0,0,77,78,3,20,10,0,78,80,1,0,0,0,79,74,1,0,0,0,79,75,1,
		0,0,0,80,17,1,0,0,0,81,82,5,10,0,0,82,19,1,0,0,0,83,84,5,12,0,0,84,21,
		1,0,0,0,85,86,5,7,0,0,86,91,3,24,12,0,87,88,5,5,0,0,88,90,3,24,12,0,89,
		87,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,
		91,1,0,0,0,94,95,5,8,0,0,95,99,1,0,0,0,96,97,5,7,0,0,97,99,5,8,0,0,98,
		85,1,0,0,0,98,96,1,0,0,0,99,23,1,0,0,0,100,103,3,18,9,0,101,102,5,9,0,
		0,102,104,3,26,13,0,103,101,1,0,0,0,103,104,1,0,0,0,104,25,1,0,0,0,105,
		106,5,12,0,0,106,27,1,0,0,0,107,108,5,13,0,0,108,29,1,0,0,0,9,33,41,53,
		58,67,79,91,98,103
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
