//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/AWSIMScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AWSIMScriptGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		STRING=10, SIGN=11, NUMBER=12, ID=13, WS=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"STRING", "SIGN", "NUMBER", "ID", "WS"
	};


	public AWSIMScriptGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AWSIMScriptGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", "','", "'at'", "'['", "']'", "'with-speed-limit'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "STRING", 
		"SIGN", "NUMBER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AWSIMScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AWSIMScriptGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,105,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,
		1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
		5,9,66,8,9,10,9,12,9,69,9,9,1,9,1,9,1,10,1,10,1,11,3,11,76,8,11,1,11,5,
		11,79,8,11,10,11,12,11,82,9,11,1,11,3,11,85,8,11,1,11,4,11,88,8,11,11,
		11,12,11,89,1,12,1,12,5,12,94,8,12,10,12,12,12,97,9,12,1,13,4,13,100,8,
		13,11,13,12,13,101,1,13,1,13,1,67,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,1,0,5,2,0,43,43,45,45,1,0,48,57,3,
		0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,
		111,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,0,5,33,
		1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,39,1,0,0,0,13,42,1,0,0,0,15,44,1,
		0,0,0,17,46,1,0,0,0,19,63,1,0,0,0,21,72,1,0,0,0,23,75,1,0,0,0,25,91,1,
		0,0,0,27,99,1,0,0,0,29,30,5,59,0,0,30,2,1,0,0,0,31,32,5,61,0,0,32,4,1,
		0,0,0,33,34,5,40,0,0,34,6,1,0,0,0,35,36,5,41,0,0,36,8,1,0,0,0,37,38,5,
		44,0,0,38,10,1,0,0,0,39,40,5,97,0,0,40,41,5,116,0,0,41,12,1,0,0,0,42,43,
		5,91,0,0,43,14,1,0,0,0,44,45,5,93,0,0,45,16,1,0,0,0,46,47,5,119,0,0,47,
		48,5,105,0,0,48,49,5,116,0,0,49,50,5,104,0,0,50,51,5,45,0,0,51,52,5,115,
		0,0,52,53,5,112,0,0,53,54,5,101,0,0,54,55,5,101,0,0,55,56,5,100,0,0,56,
		57,5,45,0,0,57,58,5,108,0,0,58,59,5,105,0,0,59,60,5,109,0,0,60,61,5,105,
		0,0,61,62,5,116,0,0,62,18,1,0,0,0,63,67,5,34,0,0,64,66,9,0,0,0,65,64,1,
		0,0,0,66,69,1,0,0,0,67,68,1,0,0,0,67,65,1,0,0,0,68,70,1,0,0,0,69,67,1,
		0,0,0,70,71,5,34,0,0,71,20,1,0,0,0,72,73,7,0,0,0,73,22,1,0,0,0,74,76,3,
		21,10,0,75,74,1,0,0,0,75,76,1,0,0,0,76,84,1,0,0,0,77,79,7,1,0,0,78,77,
		1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,0,82,80,
		1,0,0,0,83,85,5,46,0,0,84,80,1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,88,
		7,1,0,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,24,
		1,0,0,0,91,95,7,2,0,0,92,94,7,3,0,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,
		1,0,0,0,95,96,1,0,0,0,96,26,1,0,0,0,97,95,1,0,0,0,98,100,7,4,0,0,99,98,
		1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,103,1,0,0,0,
		103,104,6,13,0,0,104,28,1,0,0,0,8,0,67,75,80,84,89,95,101,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
