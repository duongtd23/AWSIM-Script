//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/AWSIMScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AWSIMScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, STRING=14, SIGN=15, NUMBER=16, 
		ID=17, WS=18, LINE_COMMENT=19;
	public const int
		RULE_scenario = 0, RULE_statement = 1, RULE_assignmentStm = 2, RULE_expression = 3, 
		RULE_function = 4, RULE_argumentList = 5, RULE_arrayExp = 6, RULE_positionExp = 7, 
		RULE_lanePositionExp = 8, RULE_routeExp = 9, RULE_variableExp = 10, RULE_spawnDelayOptionExp = 11;
	public static readonly string[] ruleNames = {
		"scenario", "statement", "assignmentStm", "expression", "function", "argumentList", 
		"arrayExp", "positionExp", "lanePositionExp", "routeExp", "variableExp", 
		"spawnDelayOptionExp"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", "','", "'['", "']'", "'at'", "'with-speed-limit'", 
		"'delay'", "'delay-movement'", "'delay-until-ego-move'", "'delay-until-ego-engaged'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STRING", "SIGN", "NUMBER", "ID", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AWSIMScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AWSIMScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AWSIMScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AWSIMScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AWSIMScriptGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioContext scenario() {
		ScenarioContext _localctx = new ScenarioContext(Context, State);
		EnterRule(_localctx, 0, RULE_scenario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 24;
				statement();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmContext assignmentStm() {
			return GetRuleContext<AssignmentStmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31;
				assignmentStm();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				function();
				State = 33;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmContext assignmentStm() {
		AssignmentStmContext _localctx = new AssignmentStmContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignmentStm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			variableExp();
			State = 38;
			Match(T__1);
			State = 39;
			expression();
			State = 40;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AWSIMScriptGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PositionExpContext positionExp() {
			return GetRuleContext<PositionExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteExpContext routeExp() {
			return GetRuleContext<RouteExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayExpContext arrayExp() {
			return GetRuleContext<ArrayExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpawnDelayOptionExpContext spawnDelayOptionExp() {
			return GetRuleContext<SpawnDelayOptionExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				positionExp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44;
				routeExp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 45;
				arrayExp();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 46;
				variableExp();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 47;
				spawnDelayOptionExp();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 48;
				function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AWSIMScriptGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(ID);
			State = 52;
			Match(T__2);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 162880L) != 0)) {
				{
				State = 53;
				argumentList();
				}
			}

			State = 56;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 10, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			expression();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 59;
				Match(T__4);
				State = 60;
				expression();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArrayExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArrayExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayExpContext arrayExp() {
		ArrayExpContext _localctx = new ArrayExpContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(T__5);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 162880L) != 0)) {
				{
				State = 67;
				argumentList();
				}
			}

			State = 70;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LanePositionExpContext lanePositionExp() {
			return GetRuleContext<LanePositionExpContext>(0);
		}
		public PositionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionExpContext positionExp() {
		PositionExpContext _localctx = new PositionExpContext(Context, State);
		EnterRule(_localctx, 14, RULE_positionExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			lanePositionExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LanePositionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AWSIMScriptGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AWSIMScriptGrammarParser.NUMBER, 0); }
		public LanePositionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lanePositionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterLanePositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitLanePositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLanePositionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LanePositionExpContext lanePositionExp() {
		LanePositionExpContext _localctx = new LanePositionExpContext(Context, State);
		EnterRule(_localctx, 16, RULE_lanePositionExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(STRING);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 75;
				Match(T__7);
				State = 76;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AWSIMScriptGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AWSIMScriptGrammarParser.NUMBER, 0); }
		public RouteExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterRouteExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitRouteExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteExpContext routeExp() {
		RouteExpContext _localctx = new RouteExpContext(Context, State);
		EnterRule(_localctx, 18, RULE_routeExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(STRING);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 80;
				Match(T__8);
				State = 81;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AWSIMScriptGrammarParser.ID, 0); }
		public VariableExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpContext variableExp() {
		VariableExpContext _localctx = new VariableExpContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnDelayOptionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AWSIMScriptGrammarParser.NUMBER, 0); }
		public SpawnDelayOptionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnDelayOptionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterSpawnDelayOptionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitSpawnDelayOptionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnDelayOptionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnDelayOptionExpContext spawnDelayOptionExp() {
		SpawnDelayOptionExpContext _localctx = new SpawnDelayOptionExpContext(Context, State);
		EnterRule(_localctx, 22, RULE_spawnDelayOptionExp);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				Match(T__9);
				State = 87;
				Match(T__2);
				State = 88;
				Match(NUMBER);
				State = 89;
				Match(T__3);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				Match(T__10);
				State = 91;
				Match(T__2);
				State = 92;
				Match(NUMBER);
				State = 93;
				Match(T__3);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				Match(T__11);
				State = 95;
				Match(T__2);
				State = 96;
				Match(NUMBER);
				State = 97;
				Match(T__3);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				Match(T__12);
				State = 99;
				Match(T__2);
				State = 100;
				Match(NUMBER);
				State = 101;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,19,105,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,4,0,26,8,0,11,0,12,0,27,1,
		0,1,0,1,1,1,1,1,1,1,1,3,1,36,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,3,3,50,8,3,1,4,1,4,1,4,3,4,55,8,4,1,4,1,4,1,5,1,5,1,5,5,5,62,
		8,5,10,5,12,5,65,9,5,1,6,1,6,3,6,69,8,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,3,
		8,78,8,8,1,9,1,9,1,9,3,9,83,8,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,103,8,11,1,11,0,
		0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,108,0,25,1,0,0,0,2,35,1,0,0,0,
		4,37,1,0,0,0,6,49,1,0,0,0,8,51,1,0,0,0,10,58,1,0,0,0,12,66,1,0,0,0,14,
		72,1,0,0,0,16,74,1,0,0,0,18,79,1,0,0,0,20,84,1,0,0,0,22,102,1,0,0,0,24,
		26,3,2,1,0,25,24,1,0,0,0,26,27,1,0,0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,
		29,1,0,0,0,29,30,5,0,0,1,30,1,1,0,0,0,31,36,3,4,2,0,32,33,3,8,4,0,33,34,
		5,1,0,0,34,36,1,0,0,0,35,31,1,0,0,0,35,32,1,0,0,0,36,3,1,0,0,0,37,38,3,
		20,10,0,38,39,5,2,0,0,39,40,3,6,3,0,40,41,5,1,0,0,41,5,1,0,0,0,42,50,5,
		14,0,0,43,50,3,14,7,0,44,50,3,18,9,0,45,50,3,12,6,0,46,50,3,20,10,0,47,
		50,3,22,11,0,48,50,3,8,4,0,49,42,1,0,0,0,49,43,1,0,0,0,49,44,1,0,0,0,49,
		45,1,0,0,0,49,46,1,0,0,0,49,47,1,0,0,0,49,48,1,0,0,0,50,7,1,0,0,0,51,52,
		5,17,0,0,52,54,5,3,0,0,53,55,3,10,5,0,54,53,1,0,0,0,54,55,1,0,0,0,55,56,
		1,0,0,0,56,57,5,4,0,0,57,9,1,0,0,0,58,63,3,6,3,0,59,60,5,5,0,0,60,62,3,
		6,3,0,61,59,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,11,1,
		0,0,0,65,63,1,0,0,0,66,68,5,6,0,0,67,69,3,10,5,0,68,67,1,0,0,0,68,69,1,
		0,0,0,69,70,1,0,0,0,70,71,5,7,0,0,71,13,1,0,0,0,72,73,3,16,8,0,73,15,1,
		0,0,0,74,77,5,14,0,0,75,76,5,8,0,0,76,78,5,16,0,0,77,75,1,0,0,0,77,78,
		1,0,0,0,78,17,1,0,0,0,79,82,5,14,0,0,80,81,5,9,0,0,81,83,5,16,0,0,82,80,
		1,0,0,0,82,83,1,0,0,0,83,19,1,0,0,0,84,85,5,17,0,0,85,21,1,0,0,0,86,87,
		5,10,0,0,87,88,5,3,0,0,88,89,5,16,0,0,89,103,5,4,0,0,90,91,5,11,0,0,91,
		92,5,3,0,0,92,93,5,16,0,0,93,103,5,4,0,0,94,95,5,12,0,0,95,96,5,3,0,0,
		96,97,5,16,0,0,97,103,5,4,0,0,98,99,5,13,0,0,99,100,5,3,0,0,100,101,5,
		16,0,0,101,103,5,4,0,0,102,86,1,0,0,0,102,90,1,0,0,0,102,94,1,0,0,0,102,
		98,1,0,0,0,103,23,1,0,0,0,9,27,35,49,54,63,68,77,82,102
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
