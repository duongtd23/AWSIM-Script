//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/AWSIMScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AWSIMScriptGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, STRING=16, 
		SIGN=17, NUMBER=18, ID=19, WS=20, LINE_COMMENT=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "STRING", "SIGN", 
		"NUMBER", "ID", "WS", "LINE_COMMENT"
	};


	public AWSIMScriptGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AWSIMScriptGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", "','", "'['", "']'", "'at'", "'with-speed-limit'", 
		"'delay-spawn'", "'delay-move'", "'delay-spawn-until-ego-move'", "'delay-move-until-ego-move'", 
		"'delay-spawn-until-ego-engaged'", "'delay-move-until-ego-engaged'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "STRING", "SIGN", "NUMBER", "ID", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AWSIMScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AWSIMScriptGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,21,265,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,15,1,15,5,15,215,8,15,10,15,12,15,218,9,15,1,
		15,1,15,1,16,1,16,1,17,3,17,225,8,17,1,17,5,17,228,8,17,10,17,12,17,231,
		9,17,1,17,3,17,234,8,17,1,17,4,17,237,8,17,11,17,12,17,238,1,18,1,18,5,
		18,243,8,18,10,18,12,18,246,9,18,1,19,4,19,249,8,19,11,19,12,19,250,1,
		19,1,19,1,20,1,20,1,20,1,20,5,20,259,8,20,10,20,12,20,262,9,20,1,20,1,
		20,1,216,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,1,0,6,2,0,43,43,
		45,45,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,
		0,9,10,13,13,32,32,2,0,10,10,13,13,272,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
		0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,49,1,0,0,
		0,9,51,1,0,0,0,11,53,1,0,0,0,13,55,1,0,0,0,15,57,1,0,0,0,17,60,1,0,0,0,
		19,77,1,0,0,0,21,89,1,0,0,0,23,100,1,0,0,0,25,127,1,0,0,0,27,153,1,0,0,
		0,29,183,1,0,0,0,31,212,1,0,0,0,33,221,1,0,0,0,35,224,1,0,0,0,37,240,1,
		0,0,0,39,248,1,0,0,0,41,254,1,0,0,0,43,44,5,59,0,0,44,2,1,0,0,0,45,46,
		5,61,0,0,46,4,1,0,0,0,47,48,5,40,0,0,48,6,1,0,0,0,49,50,5,41,0,0,50,8,
		1,0,0,0,51,52,5,44,0,0,52,10,1,0,0,0,53,54,5,91,0,0,54,12,1,0,0,0,55,56,
		5,93,0,0,56,14,1,0,0,0,57,58,5,97,0,0,58,59,5,116,0,0,59,16,1,0,0,0,60,
		61,5,119,0,0,61,62,5,105,0,0,62,63,5,116,0,0,63,64,5,104,0,0,64,65,5,45,
		0,0,65,66,5,115,0,0,66,67,5,112,0,0,67,68,5,101,0,0,68,69,5,101,0,0,69,
		70,5,100,0,0,70,71,5,45,0,0,71,72,5,108,0,0,72,73,5,105,0,0,73,74,5,109,
		0,0,74,75,5,105,0,0,75,76,5,116,0,0,76,18,1,0,0,0,77,78,5,100,0,0,78,79,
		5,101,0,0,79,80,5,108,0,0,80,81,5,97,0,0,81,82,5,121,0,0,82,83,5,45,0,
		0,83,84,5,115,0,0,84,85,5,112,0,0,85,86,5,97,0,0,86,87,5,119,0,0,87,88,
		5,110,0,0,88,20,1,0,0,0,89,90,5,100,0,0,90,91,5,101,0,0,91,92,5,108,0,
		0,92,93,5,97,0,0,93,94,5,121,0,0,94,95,5,45,0,0,95,96,5,109,0,0,96,97,
		5,111,0,0,97,98,5,118,0,0,98,99,5,101,0,0,99,22,1,0,0,0,100,101,5,100,
		0,0,101,102,5,101,0,0,102,103,5,108,0,0,103,104,5,97,0,0,104,105,5,121,
		0,0,105,106,5,45,0,0,106,107,5,115,0,0,107,108,5,112,0,0,108,109,5,97,
		0,0,109,110,5,119,0,0,110,111,5,110,0,0,111,112,5,45,0,0,112,113,5,117,
		0,0,113,114,5,110,0,0,114,115,5,116,0,0,115,116,5,105,0,0,116,117,5,108,
		0,0,117,118,5,45,0,0,118,119,5,101,0,0,119,120,5,103,0,0,120,121,5,111,
		0,0,121,122,5,45,0,0,122,123,5,109,0,0,123,124,5,111,0,0,124,125,5,118,
		0,0,125,126,5,101,0,0,126,24,1,0,0,0,127,128,5,100,0,0,128,129,5,101,0,
		0,129,130,5,108,0,0,130,131,5,97,0,0,131,132,5,121,0,0,132,133,5,45,0,
		0,133,134,5,109,0,0,134,135,5,111,0,0,135,136,5,118,0,0,136,137,5,101,
		0,0,137,138,5,45,0,0,138,139,5,117,0,0,139,140,5,110,0,0,140,141,5,116,
		0,0,141,142,5,105,0,0,142,143,5,108,0,0,143,144,5,45,0,0,144,145,5,101,
		0,0,145,146,5,103,0,0,146,147,5,111,0,0,147,148,5,45,0,0,148,149,5,109,
		0,0,149,150,5,111,0,0,150,151,5,118,0,0,151,152,5,101,0,0,152,26,1,0,0,
		0,153,154,5,100,0,0,154,155,5,101,0,0,155,156,5,108,0,0,156,157,5,97,0,
		0,157,158,5,121,0,0,158,159,5,45,0,0,159,160,5,115,0,0,160,161,5,112,0,
		0,161,162,5,97,0,0,162,163,5,119,0,0,163,164,5,110,0,0,164,165,5,45,0,
		0,165,166,5,117,0,0,166,167,5,110,0,0,167,168,5,116,0,0,168,169,5,105,
		0,0,169,170,5,108,0,0,170,171,5,45,0,0,171,172,5,101,0,0,172,173,5,103,
		0,0,173,174,5,111,0,0,174,175,5,45,0,0,175,176,5,101,0,0,176,177,5,110,
		0,0,177,178,5,103,0,0,178,179,5,97,0,0,179,180,5,103,0,0,180,181,5,101,
		0,0,181,182,5,100,0,0,182,28,1,0,0,0,183,184,5,100,0,0,184,185,5,101,0,
		0,185,186,5,108,0,0,186,187,5,97,0,0,187,188,5,121,0,0,188,189,5,45,0,
		0,189,190,5,109,0,0,190,191,5,111,0,0,191,192,5,118,0,0,192,193,5,101,
		0,0,193,194,5,45,0,0,194,195,5,117,0,0,195,196,5,110,0,0,196,197,5,116,
		0,0,197,198,5,105,0,0,198,199,5,108,0,0,199,200,5,45,0,0,200,201,5,101,
		0,0,201,202,5,103,0,0,202,203,5,111,0,0,203,204,5,45,0,0,204,205,5,101,
		0,0,205,206,5,110,0,0,206,207,5,103,0,0,207,208,5,97,0,0,208,209,5,103,
		0,0,209,210,5,101,0,0,210,211,5,100,0,0,211,30,1,0,0,0,212,216,5,34,0,
		0,213,215,9,0,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,217,1,0,0,0,216,
		214,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,220,5,34,0,0,220,32,1,
		0,0,0,221,222,7,0,0,0,222,34,1,0,0,0,223,225,3,33,16,0,224,223,1,0,0,0,
		224,225,1,0,0,0,225,233,1,0,0,0,226,228,7,1,0,0,227,226,1,0,0,0,228,231,
		1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,
		0,232,234,5,46,0,0,233,229,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,
		237,7,1,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,1,
		0,0,0,239,36,1,0,0,0,240,244,7,2,0,0,241,243,7,3,0,0,242,241,1,0,0,0,243,
		246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,38,1,0,0,0,246,244,1,0,
		0,0,247,249,7,4,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,
		251,1,0,0,0,251,252,1,0,0,0,252,253,6,19,0,0,253,40,1,0,0,0,254,255,5,
		47,0,0,255,256,5,47,0,0,256,260,1,0,0,0,257,259,8,5,0,0,258,257,1,0,0,
		0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,263,1,0,0,0,262,
		260,1,0,0,0,263,264,6,20,0,0,264,42,1,0,0,0,9,0,216,224,229,233,238,244,
		250,260,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
