//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/AWSIMScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AWSIMScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, STRING=16, 
		SIGN=17, NUMBER=18, ID=19, WS=20, LINE_COMMENT=21;
	public const int
		RULE_scenario = 0, RULE_statement = 1, RULE_assignmentStm = 2, RULE_expression = 3, 
		RULE_functionExp = 4, RULE_argumentList = 5, RULE_arrayExp = 6, RULE_positionExp = 7, 
		RULE_lanePositionExp = 8, RULE_routeExp = 9, RULE_variableExp = 10, RULE_spawnDelayOptionExp = 11, 
		RULE_stringExp = 12, RULE_numberExp = 13, RULE_idExp = 14;
	public static readonly string[] ruleNames = {
		"scenario", "statement", "assignmentStm", "expression", "functionExp", 
		"argumentList", "arrayExp", "positionExp", "lanePositionExp", "routeExp", 
		"variableExp", "spawnDelayOptionExp", "stringExp", "numberExp", "idExp"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", "','", "'['", "']'", "'at'", "'with-speed-limit'", 
		"'delay-spawn'", "'delay-move'", "'delay-spawn-until-ego-move'", "'delay-move-until-ego-move'", 
		"'delay-spawn-until-ego-engaged'", "'delay-move-until-ego-engaged'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "STRING", "SIGN", "NUMBER", "ID", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AWSIMScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AWSIMScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AWSIMScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AWSIMScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AWSIMScriptGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitScenario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioContext scenario() {
		ScenarioContext _localctx = new ScenarioContext(Context, State);
		EnterRule(_localctx, 0, RULE_scenario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30;
				statement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmContext assignmentStm() {
			return GetRuleContext<AssignmentStmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpContext functionExp() {
			return GetRuleContext<FunctionExpContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 37;
				assignmentStm();
				}
				break;
			case 2:
				{
				State = 38;
				functionExp();
				}
				break;
			}
			State = 41;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitAssignmentStm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmContext assignmentStm() {
		AssignmentStmContext _localctx = new AssignmentStmContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignmentStm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			variableExp();
			State = 44;
			Match(T__1);
			State = 45;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionExpContext positionExp() {
			return GetRuleContext<PositionExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RouteExpContext routeExp() {
			return GetRuleContext<RouteExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayExpContext arrayExp() {
			return GetRuleContext<ArrayExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpContext variableExp() {
			return GetRuleContext<VariableExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpawnDelayOptionExpContext spawnDelayOptionExp() {
			return GetRuleContext<SpawnDelayOptionExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpContext functionExp() {
			return GetRuleContext<FunctionExpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				stringExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				positionExp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				routeExp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 50;
				arrayExp();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 51;
				variableExp();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 52;
				spawnDelayOptionExp();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 53;
				functionExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExpContext idExp() {
			return GetRuleContext<IdExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpContext functionExp() {
		FunctionExpContext _localctx = new FunctionExpContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			idExp();
			State = 57;
			Match(T__2);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 654400L) != 0)) {
				{
				State = 58;
				argumentList();
				}
			}

			State = 61;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 10, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			expression();
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 64;
				Match(T__4);
				State = 65;
				expression();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterArrayExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitArrayExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayExpContext arrayExp() {
		ArrayExpContext _localctx = new ArrayExpContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__5);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 654400L) != 0)) {
				{
				State = 72;
				argumentList();
				}
			}

			State = 75;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LanePositionExpContext lanePositionExp() {
			return GetRuleContext<LanePositionExpContext>(0);
		}
		public PositionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitPositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionExpContext positionExp() {
		PositionExpContext _localctx = new PositionExpContext(Context, State);
		EnterRule(_localctx, 14, RULE_positionExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			lanePositionExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LanePositionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		public LanePositionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lanePositionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterLanePositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitLanePositionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLanePositionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LanePositionExpContext lanePositionExp() {
		LanePositionExpContext _localctx = new LanePositionExpContext(Context, State);
		EnterRule(_localctx, 16, RULE_lanePositionExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			stringExp();
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 80;
				Match(T__7);
				State = 81;
				numberExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExpContext stringExp() {
			return GetRuleContext<StringExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		public RouteExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routeExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterRouteExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitRouteExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouteExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RouteExpContext routeExp() {
		RouteExpContext _localctx = new RouteExpContext(Context, State);
		EnterRule(_localctx, 18, RULE_routeExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			stringExp();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 85;
				Match(T__8);
				State = 86;
				numberExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExpContext idExp() {
			return GetRuleContext<IdExpContext>(0);
		}
		public VariableExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpContext variableExp() {
		VariableExpContext _localctx = new VariableExpContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			idExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnDelayOptionExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberExpContext numberExp() {
			return GetRuleContext<NumberExpContext>(0);
		}
		public SpawnDelayOptionExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnDelayOptionExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterSpawnDelayOptionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitSpawnDelayOptionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpawnDelayOptionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpawnDelayOptionExpContext spawnDelayOptionExp() {
		SpawnDelayOptionExpContext _localctx = new SpawnDelayOptionExpContext(Context, State);
		EnterRule(_localctx, 22, RULE_spawnDelayOptionExp);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				Match(T__9);
				State = 92;
				Match(T__2);
				State = 93;
				numberExp();
				State = 94;
				Match(T__3);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(T__10);
				State = 97;
				Match(T__2);
				State = 98;
				numberExp();
				State = 99;
				Match(T__3);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101;
				Match(T__11);
				State = 102;
				Match(T__2);
				State = 103;
				numberExp();
				State = 104;
				Match(T__3);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106;
				Match(T__12);
				State = 107;
				Match(T__2);
				State = 108;
				numberExp();
				State = 109;
				Match(T__3);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111;
				Match(T__13);
				State = 112;
				Match(T__2);
				State = 113;
				numberExp();
				State = 114;
				Match(T__3);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 6);
				{
				State = 116;
				Match(T__14);
				State = 117;
				Match(T__2);
				State = 118;
				numberExp();
				State = 119;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AWSIMScriptGrammarParser.STRING, 0); }
		public StringExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpContext stringExp() {
		StringExpContext _localctx = new StringExpContext(Context, State);
		EnterRule(_localctx, 24, RULE_stringExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AWSIMScriptGrammarParser.NUMBER, 0); }
		public NumberExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberExpContext numberExp() {
		NumberExpContext _localctx = new NumberExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_numberExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AWSIMScriptGrammarParser.ID, 0); }
		public IdExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.EnterIdExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAWSIMScriptGrammarListener typedListener = listener as IAWSIMScriptGrammarListener;
			if (typedListener != null) typedListener.ExitIdExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAWSIMScriptGrammarVisitor<TResult> typedVisitor = visitor as IAWSIMScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExpContext idExp() {
		IdExpContext _localctx = new IdExpContext(Context, State);
		EnterRule(_localctx, 28, RULE_idExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,21,130,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,4,0,32,8,0,11,0,12,0,33,1,0,1,0,1,1,1,1,3,1,40,8,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,55,8,3,1,4,1,4,1,4,3,4,60,8,4,
		1,4,1,4,1,5,1,5,1,5,5,5,67,8,5,10,5,12,5,70,9,5,1,6,1,6,3,6,74,8,6,1,6,
		1,6,1,7,1,7,1,8,1,8,1,8,3,8,83,8,8,1,9,1,9,1,9,3,9,88,8,9,1,10,1,10,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,3,11,122,8,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,0,0,15,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,0,0,132,0,31,1,0,0,0,2,39,1,0,0,0,4,
		43,1,0,0,0,6,54,1,0,0,0,8,56,1,0,0,0,10,63,1,0,0,0,12,71,1,0,0,0,14,77,
		1,0,0,0,16,79,1,0,0,0,18,84,1,0,0,0,20,89,1,0,0,0,22,121,1,0,0,0,24,123,
		1,0,0,0,26,125,1,0,0,0,28,127,1,0,0,0,30,32,3,2,1,0,31,30,1,0,0,0,32,33,
		1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,35,1,0,0,0,35,36,5,0,0,1,36,1,1,
		0,0,0,37,40,3,4,2,0,38,40,3,8,4,0,39,37,1,0,0,0,39,38,1,0,0,0,40,41,1,
		0,0,0,41,42,5,1,0,0,42,3,1,0,0,0,43,44,3,20,10,0,44,45,5,2,0,0,45,46,3,
		6,3,0,46,5,1,0,0,0,47,55,3,24,12,0,48,55,3,14,7,0,49,55,3,18,9,0,50,55,
		3,12,6,0,51,55,3,20,10,0,52,55,3,22,11,0,53,55,3,8,4,0,54,47,1,0,0,0,54,
		48,1,0,0,0,54,49,1,0,0,0,54,50,1,0,0,0,54,51,1,0,0,0,54,52,1,0,0,0,54,
		53,1,0,0,0,55,7,1,0,0,0,56,57,3,28,14,0,57,59,5,3,0,0,58,60,3,10,5,0,59,
		58,1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,62,5,4,0,0,62,9,1,0,0,0,63,68,
		3,6,3,0,64,65,5,5,0,0,65,67,3,6,3,0,66,64,1,0,0,0,67,70,1,0,0,0,68,66,
		1,0,0,0,68,69,1,0,0,0,69,11,1,0,0,0,70,68,1,0,0,0,71,73,5,6,0,0,72,74,
		3,10,5,0,73,72,1,0,0,0,73,74,1,0,0,0,74,75,1,0,0,0,75,76,5,7,0,0,76,13,
		1,0,0,0,77,78,3,16,8,0,78,15,1,0,0,0,79,82,3,24,12,0,80,81,5,8,0,0,81,
		83,3,26,13,0,82,80,1,0,0,0,82,83,1,0,0,0,83,17,1,0,0,0,84,87,3,24,12,0,
		85,86,5,9,0,0,86,88,3,26,13,0,87,85,1,0,0,0,87,88,1,0,0,0,88,19,1,0,0,
		0,89,90,3,28,14,0,90,21,1,0,0,0,91,92,5,10,0,0,92,93,5,3,0,0,93,94,3,26,
		13,0,94,95,5,4,0,0,95,122,1,0,0,0,96,97,5,11,0,0,97,98,5,3,0,0,98,99,3,
		26,13,0,99,100,5,4,0,0,100,122,1,0,0,0,101,102,5,12,0,0,102,103,5,3,0,
		0,103,104,3,26,13,0,104,105,5,4,0,0,105,122,1,0,0,0,106,107,5,13,0,0,107,
		108,5,3,0,0,108,109,3,26,13,0,109,110,5,4,0,0,110,122,1,0,0,0,111,112,
		5,14,0,0,112,113,5,3,0,0,113,114,3,26,13,0,114,115,5,4,0,0,115,122,1,0,
		0,0,116,117,5,15,0,0,117,118,5,3,0,0,118,119,3,26,13,0,119,120,5,4,0,0,
		120,122,1,0,0,0,121,91,1,0,0,0,121,96,1,0,0,0,121,101,1,0,0,0,121,106,
		1,0,0,0,121,111,1,0,0,0,121,116,1,0,0,0,122,23,1,0,0,0,123,124,5,16,0,
		0,124,25,1,0,0,0,125,126,5,18,0,0,126,27,1,0,0,0,127,128,5,19,0,0,128,
		29,1,0,0,0,9,33,39,54,59,68,73,82,87,121
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
